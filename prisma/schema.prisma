// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  tasks         Task[]    @relation("task_created")
  assignedTask  Task[]    @relation("assigned_task")
  accounts      Account[]
  sessions      Session[]
  projects      Project[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")
  tasks       Task[]
  status      String   @default("In Progress")
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @map("user_id")

  @@map("projects")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")

  status String @default("To Do")

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @map("project_id")
  user      User?    @relation("task_created", fields: [userId], references: [id])
  userId    String?  @map("user_id")

  assignee   User?   @relation("assigned_task", fields: [assigneeId], references: [id])
  assigneeId String? @map("assignee_id")

  @@map("tasks")
}
